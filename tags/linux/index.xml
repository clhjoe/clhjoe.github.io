<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
  <channel>
    <title>linux on Joe&#39;s Notes</title>
    <link>https://clhjoe.github.io/tags/linux/</link>
    <description>Recent content in linux on Joe&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Tue, 29 Oct 2019 11:54:32 +0800</lastBuildDate>
    
	<atom:link href="https://clhjoe.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux Dns Debug</title>
      <link>https://clhjoe.github.io/post/linux-dns-debug/</link>
      <pubDate>Tue, 29 Oct 2019 11:54:32 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/post/linux-dns-debug/</guid>
      <description>我到底用了哪台DNS server? 在Linux上，不管是使用glibc dns resolver或是golang自己實做的dns resolver, 他們都會去查看系統下的 /etc/hosts 及 /etc/resolv.conf 。/etc/hosts沒什麼好說的，下面舉個/etc/resolv.conf的例子
nameserver 127.0.0.53 nameserver 8.8.8.8 這邊的結果代表他會先去查詢 127.0.0.53 如果查不到再去查 8.8.8.8，如果也失敗了再重頭來直到嘗試三次都查不到才宣告放棄。想想，這時候如果是在第三輪才藉由8.8.8.8查到IP，那都浪費多少生命了。
AWS上的DNS 查詢 AWS DNS有哪些？ 在AWS上，可以使用的DNS server有 169.254.169.254 跟 VPC IPv4 network range加2(假設你的IP range是 10.2.0.0/16 ，你就可以用10.2.0.2當DNS server).差別在前者在某些OS上是不能使用的(例如 Windows Server 2008) 但是在Linux上是沒有問題的。
AWS DNS限制 AWS DNS有每秒不能超過1024次query的限制，假設超過了就會把你throttle。建議的作法是安裝 dnsmasq 他會cache住查詢結果，這樣就不用一直去問啦～預設cache時間是DNS設置的ttl時間，要注意的是，自己延長TTL是有風險的。假設你使用了RDS的服務，他是透過DNS來切換Master/Slave的，當你延長了TTL也就代表當今天Master掛了，你需要花更久的時間才能連到新的Master。
DNS除錯方法 查詢域名是否可以解析 常見的方式是使用dig來看，例如
dig www.google.com 結果會類似
; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.11.3-1ubuntu1.9-Ubuntu &amp;lt;&amp;lt;&amp;gt;&amp;gt; www.google.com ;; global options: +cmd ;; Got answer: ;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 43990 ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 65494 ;; QUESTION SECTION: ;www.</description>
    </item>
    
    <item>
      <title>Useful Curl Alias</title>
      <link>https://clhjoe.github.io/post/useful-curl-alias/</link>
      <pubDate>Tue, 22 Oct 2019 10:53:54 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/post/useful-curl-alias/</guid>
      <description>前言 常常會需要去檢查API的狀態，包含response header及response body。所以一個好用的command組合可以讓你輕鬆一點
組合技法 將alias放到 ~/.bashrc 這樣下次啟動後就可以生效了
echo alias c=&amp;#39;curl -s --dump-header /dev/stderr&amp;#39; &amp;gt;&amp;gt; ~/.bashrc source ~/.bashrc 實際使用 c &amp;#39;https://api.ipify.org?format=json&amp;#39;|jq or c &amp;#39;https://api.ipify.org?format=json&amp;#39;|jq .ip 執行結果
joe@server:~$ c &amp;#39;https://api.ipify.org?format=json&amp;#39;|jq HTTP/1.1 200 OK Server: Cowboy Connection: keep-alive Content-Type: application/json Vary: Origin Date: Tue, 22 Oct 2019 02:57:35 GMT Content-Length: 23 Via: 1.1 vegur { &amp;#34;ip&amp;#34;: &amp;#34;115.237.31.60&amp;#34; } 是不是很好用？</description>
    </item>
    
    <item>
      <title>Complete Example of Docker Build With Go Module</title>
      <link>https://clhjoe.github.io/post/complete-example-of-docker-build-with-go-module/</link>
      <pubDate>Sun, 13 Oct 2019 21:51:59 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/post/complete-example-of-docker-build-with-go-module/</guid>
      <description>前言 前兩篇 使用multi-stage來降低docker image size 及 加速Docker編譯go 程式 ，但透過alpine會缺少一些API必要的ssl或tzdata等等的套件，這篇來分享完整的範例吧～
舉個例子 直接來看看Dockerfile, 注意步驟4跟步驟5。
Dockerfile
#first stage - builderFROMgolang:1.13.1-stretch as builderWORKDIR/api#Step 1. 複製go.mod及go.sumCOPY go.mod go.sum ./#Step 2. 下載所有的dependencies, 只要go.mod和go.sum不變就不需要重新下載相依RUN go mod download# Step 3. 複製source code並編譯COPY . .ENVGO111MODULE=onRUN CGO_ENABLED=0 GOOS=linux go build -o api main.go#second stageFROMalpine:latestWORKDIR/root/#Step 4. 安裝tzdata確保時區(time package)可以正常使用RUN apk add --no-cache tzdata#Step 5. 複製ca certificates, 確保go 可以正常的連至https的api或網頁COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/COPY --from=builder /api .CMD[&amp;#34;./api&amp;#34;] 好啦～以上就是完整的使用docker來編譯Go程式啦！最後不要忘記撰寫.dockerignore避免不必要的複製讓編譯更快速！</description>
    </item>
    
  </channel>
</rss>