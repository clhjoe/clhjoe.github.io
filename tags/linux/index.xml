<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Joe&#39;s Notes</title>
    <link>https://clhjoe.github.io/tags/linux/</link>
    <description>Recent content in Linux on Joe&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Tue, 22 Oct 2019 10:53:54 +0800</lastBuildDate>
    
	<atom:link href="https://clhjoe.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Useful Curl Alias</title>
      <link>https://clhjoe.github.io/post/useful-curl-alias/</link>
      <pubDate>Tue, 22 Oct 2019 10:53:54 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/post/useful-curl-alias/</guid>
      <description>前言 常常會需要去檢查API的狀態，包含response header及response body。所以一個好用的command組合可以讓你輕鬆一點
組合技法 將alias放到 ~/.bashrc 這樣下次啟動後就可以生效了
echo alias c=&amp;#39;curl -s --dump-header /dev/stderr&amp;#39; &amp;gt;&amp;gt; ~/.bashrc source ~/.bashrc 實際使用 c &amp;#39;https://api.ipify.org?format=json&amp;#39;|jq or c &amp;#39;https://api.ipify.org?format=json&amp;#39;|jq .ip 執行結果
joe@server:~$ c &amp;#39;https://api.ipify.org?format=json&amp;#39;|jq HTTP/1.1 200 OK Server: Cowboy Connection: keep-alive Content-Type: application/json Vary: Origin Date: Tue, 22 Oct 2019 02:57:35 GMT Content-Length: 23 Via: 1.1 vegur { &amp;#34;ip&amp;#34;: &amp;#34;115.237.31.60&amp;#34; } 是不是很好用？</description>
    </item>
    
    <item>
      <title>Complete Example of Docker Build With Go Module</title>
      <link>https://clhjoe.github.io/post/complete-example-of-docker-build-with-go-module/</link>
      <pubDate>Sun, 13 Oct 2019 21:51:59 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/post/complete-example-of-docker-build-with-go-module/</guid>
      <description>前言 前兩篇 使用multi-stage來降低docker image size 及 加速Docker編譯go 程式 ，但透過alpine會缺少一些API必要的ssl或tzdata等等的套件，這篇來分享完整的範例吧～
舉個例子 直接來看看Dockerfile, 注意步驟4跟步驟5。
Dockerfile
#first stage - builderFROMgolang:1.13.1-stretch as builderWORKDIR/api#Step 1. 複製go.mod及go.sumCOPY go.mod go.sum ./#Step 2. 下載所有的dependencies, 只要go.mod和go.sum不變就不需要重新下載相依RUN go mod download# Step 3. 複製source code並編譯COPY . .ENVGO111MODULE=onRUN CGO_ENABLED=0 GOOS=linux go build -o api main.go#second stageFROMalpine:latestWORKDIR/root/#Step 4. 安裝tzdata確保時區(time package)可以正常使用RUN apk add --no-cache tzdata#Step 5. 複製ca certificates, 確保go 可以正常的連至https的api或網頁COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/COPY --from=builder /api .CMD[&amp;#34;./api&amp;#34;] 好啦～以上就是完整的使用docker來編譯Go程式啦！最後不要忘記撰寫.dockerignore避免不必要的複製讓編譯更快速！</description>
    </item>
    
  </channel>
</rss>