<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
  <channel>
    <title>php on Joe&#39;s Notes</title>
    <link>https://clhjoe.github.io/tags/php/</link>
    <description>Recent content in php on Joe&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Tue, 31 Dec 2019 23:25:42 +0800</lastBuildDate>
    
	<atom:link href="https://clhjoe.github.io/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis Performance Optimization</title>
      <link>https://clhjoe.github.io/post/redis-performance-optimization/</link>
      <pubDate>Tue, 31 Dec 2019 23:25:42 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/post/redis-performance-optimization/</guid>
      <description>1. 使用Pipeline Redis client跟server之間的溝通是透過TCP來傳輸。每一次的command都有TCP連線傳輸的代價。因此如果有多個command要執行，可以藉由pipeline來減少TCP的overhead.
&amp;lt;?php $pipe = $redis-&amp;gt;multi(Redis::PIPELINE); for ($i = 0; $i &amp;lt; 10000; $i++) { $pipe-&amp;gt;set(&amp;#34;key::$i&amp;#34;, str_pad($i, 4, &amp;#39;0&amp;#39;, 0)); $pipe-&amp;gt;get(&amp;#34;key::$i&amp;#34;); } $replies = $pipe-&amp;gt;exec();  2. 使用 multi-argument commands 因為Redis是single process的程式，因此當一瞬間湧入大量的command時，你會發現平均的latency變長了。這是因為command必須等待前面的command被執行完才輪的到他。因此很明顯的，當如果同時有大量的操作時，使用可同時對多個key/filed操作的command將可以改善這個問題。 例如
set key1 val1 set key2 val2 改成更有效率的方式
mset key1 val1 key2 val2 下面條列出原始和對應優化的方案：
   SingleArgumentCommand Single-Argument Description Multi-Argument Alternative Multi-Argument Description     SET set the value of key MSET Set multiple keys to multiple values   GET get the value of key MGET Get the values of all the given keys   LSET set value of an element in a list LPUSH/RPUSH Prepend/append multiple values to a list   LINDEX get an element from a list LRANGE Get a range of elements from a list   HSET set the string value of a hash HMSET Set multiple hash fields to multiple values   HGET get the value of a hash field HMGET Get the values of all the given hash fields    3.</description>
    </item>
    
    <item>
      <title>Redis Fundamental</title>
      <link>https://clhjoe.github.io/post/redis-fundamental/</link>
      <pubDate>Tue, 31 Dec 2019 22:59:50 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/post/redis-fundamental/</guid>
      <description>Redis 基礎 Redis資料型態 Redis提供了豐富的資料型態操作
 Binary-safe strings:簡單來說你可以存放字串或是binary。 Lists: 按照插入順序排序的字串集合。基本上就是一個linked lists. Sets: 一群唯一(unique)的且未經排序的字串集合。 Sorted sets: 與Set集合很像差別在sorted set每一個string都有一個float的score值，Redis會依照Score值來做排序。String element仍然是unique但score可以重複。 Hashes: 即為一個map的結構，其key/value都是string。Redis的hashs與 Ruby 或 Python hashes 相似。 Bit arrays (or simply bitmaps): 簡單的說就是一個連續的二進位數字，每一個位置(offset)在bitmap上可以執行AND/OR/XOR等等操作。 HyperLogLogs: 簡單的說就是用來估計一個隨機資料結構的集合的基數。更簡單一點譬如說計算每個ip每天的access次數。  但是，人生總有個但是，也因為資料是存放在記憶體中，因此如果資料量擴展到一定的程度將對成本有劇烈的影響。所以如何妥善的使用Redis是一個很大的課題。
Redis 基礎用法 1. STRING String 是memcached 唯一支援的資料結構。簡單的key/value用法是最多初學者第一個使用的型態。
常見的使用情境有:
 限制使用者每分鐘的使用次數(限流) 暫存首頁response結果  快取資料 譬如說，當一個web page的首頁是靜態的或是不需要頻繁更新的時候，我們可以將結果(HTML or Json)存入cache。這樣一來可以減少許多DB的消耗及計算。
或是我們可以將user的token存入cache中，這樣我們可以很快的比較使用者的token是否合法。
&amp;lt;?php //SET key value [EX seconds] [PX milliseconds] [NX|XX] ; Time complexity: O(1) //GET key ; Time complexity: O(1) $redis-&amp;gt;set(&amp;#39;user_token:111&amp;#39;, &amp;#39;WFWEWEFEWF&amp;#39;,86400); $token=$redis-&amp;gt;get(&amp;#39;get user_token:111&amp;#39;); echo $token; // &amp;#34;WFWEWEFEWF&amp;#34;  Page View計算 例如我們可以是用INCR來累加page view.</description>
    </item>
    
    <item>
      <title>PHP Process Tuning</title>
      <link>https://clhjoe.github.io/post/php-process-tuning/</link>
      <pubDate>Tue, 31 Dec 2019 22:24:10 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/post/php-process-tuning/</guid>
      <description>Nginx and PHP-FPM Nginx是一個輕量的網頁伺服器，他可以高效能的處理靜態檔案。但是如果是動態頁面就必須交由後端例如GO、Python 或是PHP來進行了。現行的Nginx與PHP是通過fast-cgi(Fast Common Gateway Interface) 來進行，不同於CGI為每個Request都建立一個Process造成效能低落，FastCGI透過一個統一管理的Process管理背後的Worker避免過度頻繁建立、關閉Process。 PHP Process Manager(PM) PHP process manager有三種模式，分別為 1. static：固定process數量（數量為 pm.max_children）。 2. dynamic：動態process數量（根據 pm.max_children、pm.start_servers、pm.min_spare_servers、pm.max_spare_servers 動態調整）。 3. ondemand：動態process數量（根據 pm.max_children、pm.process_idle_timeout 動態調整）。
static 就是固定process數量。如果網站流量單純，沒有明顯流量高峰或低峰就可以選用static 。
ondemand會根據實際流量來決定process數，但是因為建立process是需要時間的，所以效能較差。但是當流量低的時候，他只會保留所需的process數，所以節省記憶體。通常用在比較不重要的服務上。
dynamic 跟 ondemand很容易稿混，dynamic可以設定規則，隨時保留足夠的預備process(min_spare_servers) 處理突波，而在結束後也可以確保記憶體不會被過度使用(max_spare_servers) ， 因此較適合在忙碌的服務上。
接下來我們著重在dynamic 的配置優化。
PHP Process Manager(PM) Dynamic模式配置優化 pm.start_servers(初始 process數) 決定初始process重要的因數就是服務實際的流量。假設服務需要10個processes, 我們一開始只給1，那系統啟動後就要一直fork process到滿足需求，期間就會造成效能瓶頸。所以比較好的方式是啟動的時候就滿足流量最大的需求個數。 預設值是 min_spare_servers + (max_spare_servers - min_spare_servers) / 2
pm.max_children(最大process 數) pm.max_children限制了系統最多可以啟動多少process, 決定process的重要因素就是你的記憶體有多大？ 每一個process都需要消耗記憶體，因此要計算你的機器能承受多少process的記憶體使用量。
因此簡單的公式就是
max_children = (system_memory - memory_used_by_other_services - buffer ) / memory_used_per_process</description>
    </item>
    
  </channel>
</rss>