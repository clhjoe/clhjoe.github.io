<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
  <channel>
    <title>redis on Joe&#39;s Notes</title>
    <link>https://clhjoe.github.io/tags/redis/</link>
    <description>Recent content in redis on Joe&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Tue, 31 Dec 2019 22:59:50 +0800</lastBuildDate>
    
	<atom:link href="https://clhjoe.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis Fundamental</title>
      <link>https://clhjoe.github.io/post/redis-fundamental/</link>
      <pubDate>Tue, 31 Dec 2019 22:59:50 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/post/redis-fundamental/</guid>
      <description>Redis 基礎 Redis資料型態 Redis提供了豐富的資料型態操作
 Binary-safe strings:簡單來說你可以存放字串或是binary。 Lists: 按照插入順序排序的字串集合。基本上就是一個linked lists. Sets: 一群唯一(unique)的且未經排序的字串集合。 Sorted sets: 與Set集合很像差別在sorted set每一個string都有一個float的score值，Redis會依照Score值來做排序。String element仍然是unique但score可以重複。 Hashes: 即為一個map的結構，其key/value都是string。Redis的hashs與 Ruby 或 Python hashes 相似。 Bit arrays (or simply bitmaps): 簡單的說就是一個連續的二進位數字，每一個位置(offset)在bitmap上可以執行AND/OR/XOR等等操作。 HyperLogLogs: 簡單的說就是用來估計一個隨機資料結構的集合的基數。更簡單一點譬如說計算每個ip每天的access次數。  但是，人生總有個但是，也因為資料是存放在記憶體中，因此如果資料量擴展到一定的程度將對成本有劇烈的影響。所以如何妥善的使用Redis是一個很大的課題。
Redis 基礎用法 1. STRING String 是memcached 唯一支援的資料結構。簡單的key/value用法是最多初學者第一個使用的型態。
常見的使用情境有:
 限制使用者每分鐘的使用次數(限流) 暫存首頁response結果  快取資料 譬如說，當一個web page的首頁是靜態的或是不需要頻繁更新的時候，我們可以將結果(HTML or Json)存入cache。這樣一來可以減少許多DB的消耗及計算。
或是我們可以將user的token存入cache中，這樣我們可以很快的比較使用者的token是否合法。
&amp;lt;?php //SET key value [EX seconds] [PX milliseconds] [NX|XX] ; Time complexity: O(1) //GET key ; Time complexity: O(1) $redis-&amp;gt;set(&amp;#39;user_token:111&amp;#39;, &amp;#39;WFWEWEFEWF&amp;#39;,86400); $token=$redis-&amp;gt;get(&amp;#39;get user_token:111&amp;#39;); echo $token; // &amp;#34;WFWEWEFEWF&amp;#34;  Page View計算 例如我們可以是用INCR來累加page view.</description>
    </item>
    
    <item>
      <title>Timeout原因整理-以Golang為例</title>
      <link>https://clhjoe.github.io/post/cause-of-connection-timeout/</link>
      <pubDate>Sat, 26 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://clhjoe.github.io/post/cause-of-connection-timeout/</guid>
      <description>前言 網路連線中有各種timeout, connection timeout, readtimeout, writetimeout等等，到底這些錯誤是什麼情況造成的呢？這邊以Go為例子整理出常見的timeout原因
connnection timeout 在建立連線的時候，如果遇到 JAVA java.net.ConnectException: Connection timed out: connect 或是 Golang dial tcp IP:PORT: connect: connection timed out通常是什麼原因呢？ 其實原因不外乎 * 與目的地網路不通 * 沒有權限連入(e.g. MySQL, Redis etc.) * 連到錯誤的IP(??)
前兩個比較好理解，第三個又是什麼意呢？以AWS為例，當你在EC2在照著官方的權限設定(VPC, Security Group配置)下想要連到RDS好了，假設你的RDS是my-rds.ld2kfdi343.us-west-2.rds.amazonaws.com, 這時候AWS的DNS伺服器給你的會是這一台的 Private IP ，但假設你把DNS改成8.8.8.8呢？你會發現你拿到的會是 Public IP ，這時候你就連不進去了！ 提供我常用檢查的SOP
Ping工具檢查 假設你要連的目的地是 10.2.3.1，可以試試Ping一下
ping 10.2.3.1 如果可以ping通代表網路是通得，但如果不通呢？也不一定是不通，因為對方可能沒打開ICMP。(但如果有通就代表不是網路連接問題))
telnet Port檢查 以MySQL來說，可以直接用telnet 連檢查是否可以連線，如果可以連線，則可以往MySQL權限檢查，如果不行，可以檢查一下防火牆、security group, 或是VPC。
telnet my-rds.ld2kfdi343.us-west-2.rds.amazonaws.com 3306 權限檢查 如同上一條提到，網路如果是通得，就檢查一下MySQL裡的權限設定。
DNS檢查 我們都知道假設需要連到某個域名，例如my-rds.ld2kfdi343.us-west-2.rds.amazonaws.com，必須先轉換成IP才能溝通。如果是無法解析，在Ping的時候就會發現了。那又為什麼要獨立寫呢？以Golang為例，目前版本預設是pure Go resolver(也就是Go自己寫的)去讀系統的/etc/hosts及 /etc/resolve.conf得到DNS清單，當程式裡需要連線的時候，假設/etc/hosts沒有就會按照順序去詢問/etc/resolve.conf的DNS,第一台解析錯誤就會問第二台。所以假設你在/etc/resolv.conf設定兩個DNS # aws dns server nameserver 10.</description>
    </item>
    
  </channel>
</rss>