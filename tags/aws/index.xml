<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
  <channel>
    <title>aws on Joe&#39;s Notes</title>
    <link>https://clhjoe.github.io/tags/aws/</link>
    <description>Recent content in aws on Joe&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Tue, 29 Oct 2019 11:54:32 +0800</lastBuildDate>
    
	<atom:link href="https://clhjoe.github.io/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux Dns Debug</title>
      <link>https://clhjoe.github.io/post/linux-dns-debug/</link>
      <pubDate>Tue, 29 Oct 2019 11:54:32 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/post/linux-dns-debug/</guid>
      <description>我到底用了哪台DNS server? 在Linux上，不管是使用glibc dns resolver或是golang自己實做的dns resolver, 他們都會去查看系統下的 /etc/hosts 及 /etc/resolv.conf 。/etc/hosts沒什麼好說的，下面舉個/etc/resolv.conf的例子
nameserver 127.0.0.53 nameserver 8.8.8.8 這邊的結果代表他會先去查詢 127.0.0.53 如果查不到再去查 8.8.8.8，如果也失敗了再重頭來直到嘗試三次都查不到才宣告放棄。想想，這時候如果是在第三輪才藉由8.8.8.8查到IP，那都浪費多少生命了。
AWS上的DNS 查詢 AWS DNS有哪些？ 在AWS上，可以使用的DNS server有 169.254.169.254 跟 VPC IPv4 network range加2(假設你的IP range是 10.2.0.0/16 ，你就可以用10.2.0.2當DNS server).差別在前者在某些OS上是不能使用的(例如 Windows Server 2008) 但是在Linux上是沒有問題的。
AWS DNS限制 AWS DNS有每秒不能超過1024次query的限制，假設超過了就會把你throttle。建議的作法是安裝 dnsmasq 他會cache住查詢結果，這樣就不用一直去問啦～預設cache時間是DNS設置的ttl時間，要注意的是，自己延長TTL是有風險的。假設你使用了RDS的服務，他是透過DNS來切換Master/Slave的，當你延長了TTL也就代表當今天Master掛了，你需要花更久的時間才能連到新的Master。
DNS除錯方法 查詢域名是否可以解析 常見的方式是使用dig來看，例如
dig www.google.com 結果會類似
; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.11.3-1ubuntu1.9-Ubuntu &amp;lt;&amp;lt;&amp;gt;&amp;gt; www.google.com ;; global options: +cmd ;; Got answer: ;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 43990 ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 65494 ;; QUESTION SECTION: ;www.</description>
    </item>
    
    <item>
      <title>Timeout原因整理-以Golang為例</title>
      <link>https://clhjoe.github.io/post/cause-of-connection-timeout/</link>
      <pubDate>Sat, 26 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://clhjoe.github.io/post/cause-of-connection-timeout/</guid>
      <description>前言 網路連線中有各種timeout, connection timeout, readtimeout, writetimeout等等，到底這些錯誤是什麼情況造成的呢？這邊以Go為例子整理出常見的timeout原因
connnection timeout 在建立連線的時候，如果遇到 JAVA java.net.ConnectException: Connection timed out: connect 或是 Golang dial tcp IP:PORT: connect: connection timed out通常是什麼原因呢？ 其實原因不外乎 * 與目的地網路不通 * 沒有權限連入(e.g. MySQL, Redis etc.) * 連到錯誤的IP(??)
前兩個比較好理解，第三個又是什麼意呢？以AWS為例，當你在EC2在照著官方的權限設定(VPC, Security Group配置)下想要連到RDS好了，假設你的RDS是my-rds.ld2kfdi343.us-west-2.rds.amazonaws.com, 這時候AWS的DNS伺服器給你的會是這一台的 Private IP ，但假設你把DNS改成8.8.8.8呢？你會發現你拿到的會是 Public IP ，這時候你就連不進去了！ 提供我常用檢查的SOP
Ping工具檢查 假設你要連的目的地是 10.2.3.1，可以試試Ping一下
ping 10.2.3.1 如果可以ping通代表網路是通得，但如果不通呢？也不一定是不通，因為對方可能沒打開ICMP。(但如果有通就代表不是網路連接問題))
telnet Port檢查 以MySQL來說，可以直接用telnet 連檢查是否可以連線，如果可以連線，則可以往MySQL權限檢查，如果不行，可以檢查一下防火牆、security group, 或是VPC。
telnet my-rds.ld2kfdi343.us-west-2.rds.amazonaws.com 3306 權限檢查 如同上一條提到，網路如果是通得，就檢查一下MySQL裡的權限設定。
DNS檢查 我們都知道假設需要連到某個域名，例如my-rds.ld2kfdi343.us-west-2.rds.amazonaws.com，必須先轉換成IP才能溝通。如果是無法解析，在Ping的時候就會發現了。那又為什麼要獨立寫呢？以Golang為例，目前版本預設是pure Go resolver(也就是Go自己寫的)去讀系統的/etc/hosts及 /etc/resolve.conf得到DNS清單，當程式裡需要連線的時候，假設/etc/hosts沒有就會按照順序去詢問/etc/resolve.conf的DNS,第一台解析錯誤就會問第二台。所以假設你在/etc/resolv.conf設定兩個DNS # aws dns server nameserver 10.</description>
    </item>
    
    <item>
      <title>Migrate API to Go</title>
      <link>https://clhjoe.github.io/post/migrate-api-to-go/</link>
      <pubDate>Sun, 20 Oct 2019 19:26:31 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/post/migrate-api-to-go/</guid>
      <description>前言 大家應該或多或少都有經驗要將某個語言實做的API搬到另一種語言重寫。原因總是有千千百百種，但是有時候當專案很大，沒辦法一次搬完的時候又該怎麼辦呢？分享一下我們的例子。
原先的API是使用PHP來撰寫，但因為幾個原因所以我們決定把他搬到Golang。
 原始PHP版本留在PHP 5.3，是一個效能不好(compare to PHP 7)以及不被維護的版本。要升級得顧慮沒有人維護的framework，所以是個大工程。 因為業務的需要，一個API request有很多可以平行化處理的事情，如果一步步來其實速度慢又浪費資源，改用Golang可以帶來大幅度的效能提昇。 我們原始業務一直是使用Golang，在QPS &amp;gt; 2w的環境上驗證過，所以成熟度完全不是問題。  因此最後決定新的API就以Golang撰寫，有需要動到舊有的API且時間足夠再搬到Golang。這時候就遇到一個問題啦，同時兩套語言寫成的API要怎麼共存的？當時想到透過切分域名或切分request path也就是routing來達成，分成幾個維度來看～
切分域名 切分域名就如字面上的意思，舊的API用原有的域名，新的API用心的域名。簡單明瞭不囉唆。但同時也有不便之處。
優缺點分析 優點  新舊API切分乾淨，新的API不會影響舊版的APP。 針對新舊API可以有完全不同的API設定，例如快取規則、HTTPS的SSL版本、及開啟HTTP/2等等  缺點  如果僅僅是想要優化API以Golang改寫，將只有新版的APP用戶會拉取，而一般APP的版本到達率&amp;hellip;慘 萬一同個API以Golang實做了，在未來如果要更改邏輯則必須兩個語言都要同時更改，增加開發及測試的複雜度   切分Routing 透過CDN切分 以Cloudfront為例，透過Cloudfront可以將不同的PATH Route到不同的Origin，甚至我們可以針對不同的PATH設定不同的快取時間、通訊協定、要cache的query parameter或header等等。 
透過Proxy(Nginx)切分 我們可以在Proxy例如Nginx來設定不同的PATH要使用PHP或者是forward到Go API。
# /v1/user forward到PHP location /v1/user { if (!-e $request_filename) { rewrite ^/(.*)$ /index.php last; } } # /v1/user/points 則forward到golang location /v1/user/points { proxy_pass https://localhost:19002; } 在Golang裡切分 這邊以Gin為例，我們把所有的request都導到Go API，如果API在golang裡面有實做則直接由GO處理，否則就proxy到原有的PHP API處理</description>
    </item>
    
  </channel>
</rss>