<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
  <channel>
    <title>tips on Joe&#39;s Notes</title>
    <link>https://clhjoe.github.io/tags/tips/</link>
    <description>Recent content in tips on Joe&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Tue, 31 Dec 2019 22:59:50 +0800</lastBuildDate>
    
	<atom:link href="https://clhjoe.github.io/tags/tips/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis Fundamental</title>
      <link>https://clhjoe.github.io/post/redis-fundamental/</link>
      <pubDate>Tue, 31 Dec 2019 22:59:50 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/post/redis-fundamental/</guid>
      <description>Redis 基礎 Redis資料型態 Redis提供了豐富的資料型態操作
 Binary-safe strings:簡單來說你可以存放字串或是binary。 Lists: 按照插入順序排序的字串集合。基本上就是一個linked lists. Sets: 一群唯一(unique)的且未經排序的字串集合。 Sorted sets: 與Set集合很像差別在sorted set每一個string都有一個float的score值，Redis會依照Score值來做排序。String element仍然是unique但score可以重複。 Hashes: 即為一個map的結構，其key/value都是string。Redis的hashs與 Ruby 或 Python hashes 相似。 Bit arrays (or simply bitmaps): 簡單的說就是一個連續的二進位數字，每一個位置(offset)在bitmap上可以執行AND/OR/XOR等等操作。 HyperLogLogs: 簡單的說就是用來估計一個隨機資料結構的集合的基數。更簡單一點譬如說計算每個ip每天的access次數。  但是，人生總有個但是，也因為資料是存放在記憶體中，因此如果資料量擴展到一定的程度將對成本有劇烈的影響。所以如何妥善的使用Redis是一個很大的課題。
Redis 基礎用法 1. STRING String 是memcached 唯一支援的資料結構。簡單的key/value用法是最多初學者第一個使用的型態。
常見的使用情境有:
 限制使用者每分鐘的使用次數(限流) 暫存首頁response結果  快取資料 譬如說，當一個web page的首頁是靜態的或是不需要頻繁更新的時候，我們可以將結果(HTML or Json)存入cache。這樣一來可以減少許多DB的消耗及計算。
或是我們可以將user的token存入cache中，這樣我們可以很快的比較使用者的token是否合法。
&amp;lt;?php //SET key value [EX seconds] [PX milliseconds] [NX|XX] ; Time complexity: O(1) //GET key ; Time complexity: O(1) $redis-&amp;gt;set(&amp;#39;user_token:111&amp;#39;, &amp;#39;WFWEWEFEWF&amp;#39;,86400); $token=$redis-&amp;gt;get(&amp;#39;get user_token:111&amp;#39;); echo $token; // &amp;#34;WFWEWEFEWF&amp;#34;  Page View計算 例如我們可以是用INCR來累加page view.</description>
    </item>
    
    <item>
      <title>Video Streaming Architecture</title>
      <link>https://clhjoe.github.io/post/video-streaming-architecture/</link>
      <pubDate>Tue, 31 Dec 2019 22:44:35 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/post/video-streaming-architecture/</guid>
      <description>影片需求 整個流程主要分成四段
 上傳 轉檔
 儲存 色情辨識  儲存與色情辨識比較沒有什麼問題，要嘛把須辨識的檔案存到S3要嘛存到EFS後非同步的辨識影片內容。接下來討論前兩個階段的方案。
上傳影片方案 上傳到系統分主要有三種方式
 Solution 1: 透過API取得S3 signed URL網址後客戶端將影片上傳到S3, 而這個API可以是API Gateway+Lambda or 自己的API伺服器。  Solution 2: 客戶端直接將影片透過API上傳到後端 Solution 3: 在API gateway開一個API然後傳送到Lambda處理     比較項目 S3 sign URL 直接上傳 API Gateway+Lambda     頻寬損耗 S3頻寬大，不消耗自有系統頻寬 佔用API伺服器頻寬 不佔用API頻寬但Lambda頻寬不確定   運算負擔 幾乎沒有消耗 消耗API伺服器運算 完全不消耗API伺服器運算   維護成本 小(S3資料傳入頻寬免費, 每次上傳$0.0000051) 小量無須新增伺服器 稍高   開發成本 中 低 不可行   擴充性 適用任何Scale需求 須隨使用量調整 不可行   限制 上傳完成後須再額外通知後台，共需3次API呼叫 伺服器須隨使用量調整 API 上傳上限10MB    處理轉檔方案 轉檔可以使用AWS的解決方案或者是自己處理。</description>
    </item>
    
    <item>
      <title>Golang Development Guideline</title>
      <link>https://clhjoe.github.io/post/golang-devlopment-guideline/</link>
      <pubDate>Tue, 31 Dec 2019 22:34:10 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/post/golang-devlopment-guideline/</guid>
      <description>1. 使用uber-go/zap 來印出Log a. zap是性能非常好的log套件，避免過度alloc memory及非同步的操作log可以大幅度的避免影響程式效能 b. 使用zap來取代fmt.Print c. 避免在zap.Debug中使用fmt.Sprintf(fmt.Sprintf仍是消耗較大的API)  DON&amp;rsquo;tDO 
fmt.Println(&amp;#34;phoneNumber %s&amp;#34;, phoneNumber) OR
import &amp;#34;uber-go/zap&amp;#34; zap.Debug(fmt.Sprintf(&amp;#34;Update phone number %d &amp;#34;, phoneNumber))  
import &amp;#34;uber-go/zap&amp;#34; zap.Debug(&amp;#34;Update phone number&amp;#34;, zap.String(&amp;#34;phone_number&amp;#34;, phoneNumber))   
2. 使用defer來釋放資源 a. 很大程度的避免漏掉關閉或移除建立的資源  DON&amp;rsquo;tDO 
tx := core.DB.Begin() err = models.ResetPhone(tx, cInfo.UIDStr, &amp;#34;0&amp;#34;, false) if err != nil { tx.Rollback() } else { tx.Commit() }  
tx := core.DB.Begin() defer func (){ if err !</description>
    </item>
    
    <item>
      <title>PHP Process Tuning</title>
      <link>https://clhjoe.github.io/post/php-process-tuning/</link>
      <pubDate>Tue, 31 Dec 2019 22:24:10 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/post/php-process-tuning/</guid>
      <description>Nginx and PHP-FPM Nginx是一個輕量的網頁伺服器，他可以高效能的處理靜態檔案。但是如果是動態頁面就必須交由後端例如GO、Python 或是PHP來進行了。現行的Nginx與PHP是通過fast-cgi(Fast Common Gateway Interface) 來進行，不同於CGI為每個Request都建立一個Process造成效能低落，FastCGI透過一個統一管理的Process管理背後的Worker避免過度頻繁建立、關閉Process。 PHP Process Manager(PM) PHP process manager有三種模式，分別為 1. static：固定process數量（數量為 pm.max_children）。 2. dynamic：動態process數量（根據 pm.max_children、pm.start_servers、pm.min_spare_servers、pm.max_spare_servers 動態調整）。 3. ondemand：動態process數量（根據 pm.max_children、pm.process_idle_timeout 動態調整）。
static 就是固定process數量。如果網站流量單純，沒有明顯流量高峰或低峰就可以選用static 。
ondemand會根據實際流量來決定process數，但是因為建立process是需要時間的，所以效能較差。但是當流量低的時候，他只會保留所需的process數，所以節省記憶體。通常用在比較不重要的服務上。
dynamic 跟 ondemand很容易稿混，dynamic可以設定規則，隨時保留足夠的預備process(min_spare_servers) 處理突波，而在結束後也可以確保記憶體不會被過度使用(max_spare_servers) ， 因此較適合在忙碌的服務上。
接下來我們著重在dynamic 的配置優化。
PHP Process Manager(PM) Dynamic模式配置優化 pm.start_servers(初始 process數) 決定初始process重要的因數就是服務實際的流量。假設服務需要10個processes, 我們一開始只給1，那系統啟動後就要一直fork process到滿足需求，期間就會造成效能瓶頸。所以比較好的方式是啟動的時候就滿足流量最大的需求個數。 預設值是 min_spare_servers + (max_spare_servers - min_spare_servers) / 2
pm.max_children(最大process 數) pm.max_children限制了系統最多可以啟動多少process, 決定process的重要因素就是你的記憶體有多大？ 每一個process都需要消耗記憶體，因此要計算你的機器能承受多少process的記憶體使用量。
因此簡單的公式就是
max_children = (system_memory - memory_used_by_other_services - buffer ) / memory_used_per_process</description>
    </item>
    
    <item>
      <title>Useful Curl Alias</title>
      <link>https://clhjoe.github.io/post/useful-curl-alias/</link>
      <pubDate>Tue, 22 Oct 2019 10:53:54 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/post/useful-curl-alias/</guid>
      <description>前言 常常會需要去檢查API的狀態，包含response header及response body。所以一個好用的command組合可以讓你輕鬆一點
組合技法 將alias放到 ~/.bashrc 這樣下次啟動後就可以生效了
echo alias c=&amp;#39;curl -s --dump-header /dev/stderr&amp;#39; &amp;gt;&amp;gt; ~/.bashrc source ~/.bashrc 實際使用 c &amp;#39;https://api.ipify.org?format=json&amp;#39;|jq or c &amp;#39;https://api.ipify.org?format=json&amp;#39;|jq .ip 執行結果
joe@server:~$ c &amp;#39;https://api.ipify.org?format=json&amp;#39;|jq HTTP/1.1 200 OK Server: Cowboy Connection: keep-alive Content-Type: application/json Vary: Origin Date: Tue, 22 Oct 2019 02:57:35 GMT Content-Length: 23 Via: 1.1 vegur { &amp;#34;ip&amp;#34;: &amp;#34;115.237.31.60&amp;#34; } 是不是很好用？</description>
    </item>
    
    <item>
      <title>Migrate API to Go</title>
      <link>https://clhjoe.github.io/post/migrate-api-to-go/</link>
      <pubDate>Sun, 20 Oct 2019 19:26:31 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/post/migrate-api-to-go/</guid>
      <description>前言 大家應該或多或少都有經驗要將某個語言實做的API搬到另一種語言重寫。原因總是有千千百百種，但是有時候當專案很大，沒辦法一次搬完的時候又該怎麼辦呢？分享一下我們的例子。
原先的API是使用PHP來撰寫，但因為幾個原因所以我們決定把他搬到Golang。
 原始PHP版本留在PHP 5.3，是一個效能不好(compare to PHP 7)以及不被維護的版本。要升級得顧慮沒有人維護的framework，所以是個大工程。 因為業務的需要，一個API request有很多可以平行化處理的事情，如果一步步來其實速度慢又浪費資源，改用Golang可以帶來大幅度的效能提昇。 我們原始業務一直是使用Golang，在QPS &amp;gt; 2w的環境上驗證過，所以成熟度完全不是問題。  因此最後決定新的API就以Golang撰寫，有需要動到舊有的API且時間足夠再搬到Golang。這時候就遇到一個問題啦，同時兩套語言寫成的API要怎麼共存的？當時想到透過切分域名或切分request path也就是routing來達成，分成幾個維度來看～
切分域名 切分域名就如字面上的意思，舊的API用原有的域名，新的API用心的域名。簡單明瞭不囉唆。但同時也有不便之處。
優缺點分析 優點  新舊API切分乾淨，新的API不會影響舊版的APP。 針對新舊API可以有完全不同的API設定，例如快取規則、HTTPS的SSL版本、及開啟HTTP/2等等  缺點  如果僅僅是想要優化API以Golang改寫，將只有新版的APP用戶會拉取，而一般APP的版本到達率&amp;hellip;慘 萬一同個API以Golang實做了，在未來如果要更改邏輯則必須兩個語言都要同時更改，增加開發及測試的複雜度   切分Routing 透過CDN切分 以Cloudfront為例，透過Cloudfront可以將不同的PATH Route到不同的Origin，甚至我們可以針對不同的PATH設定不同的快取時間、通訊協定、要cache的query parameter或header等等。 
透過Proxy(Nginx)切分 我們可以在Proxy例如Nginx來設定不同的PATH要使用PHP或者是forward到Go API。
# /v1/user forward到PHP location /v1/user { if (!-e $request_filename) { rewrite ^/(.*)$ /index.php last; } } # /v1/user/points 則forward到golang location /v1/user/points { proxy_pass https://localhost:19002; } 在Golang裡切分 這邊以Gin為例，我們把所有的request都導到Go API，如果API在golang裡面有實做則直接由GO處理，否則就proxy到原有的PHP API處理</description>
    </item>
    
    <item>
      <title>Complete Example of Docker Build With Go Module</title>
      <link>https://clhjoe.github.io/post/complete-example-of-docker-build-with-go-module/</link>
      <pubDate>Sun, 13 Oct 2019 21:51:59 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/post/complete-example-of-docker-build-with-go-module/</guid>
      <description>前言 前兩篇 使用multi-stage來降低docker image size 及 加速Docker編譯go 程式 ，但透過alpine會缺少一些API必要的ssl或tzdata等等的套件，這篇來分享完整的範例吧～
舉個例子 直接來看看Dockerfile, 注意步驟4跟步驟5。
Dockerfile
#first stage - builderFROMgolang:1.13.1-stretch as builderWORKDIR/api#Step 1. 複製go.mod及go.sumCOPY go.mod go.sum ./#Step 2. 下載所有的dependencies, 只要go.mod和go.sum不變就不需要重新下載相依RUN go mod download# Step 3. 複製source code並編譯COPY . .ENVGO111MODULE=onRUN CGO_ENABLED=0 GOOS=linux go build -o api main.go#second stageFROMalpine:latestWORKDIR/root/#Step 4. 安裝tzdata確保時區(time package)可以正常使用RUN apk add --no-cache tzdata#Step 5. 複製ca certificates, 確保go 可以正常的連至https的api或網頁COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/COPY --from=builder /api .CMD[&amp;#34;./api&amp;#34;] 好啦～以上就是完整的使用docker來編譯Go程式啦！最後不要忘記撰寫.dockerignore避免不必要的複製讓編譯更快速！</description>
    </item>
    
    <item>
      <title>Speed Up Docker Build With Go Module</title>
      <link>https://clhjoe.github.io/post/speed-up-docker-build-with-go-module/</link>
      <pubDate>Sun, 13 Oct 2019 21:23:54 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/post/speed-up-docker-build-with-go-module/</guid>
      <description>上一篇 說明了如何降低Docker 編譯Go程式產生的image大小，但同時也提到了因為Go 每次都會去抓相依的module導致編譯速度就是慢！ 有什麼方法可以加速呢？來看看看優化版本
optimized.Dockerfile
#first stage - builderFROMgolang:1.13.1-stretch as builderWORKDIR/api#Step 1. 複製go.mod及go.sumCOPY go.mod go.sum ./#Step 2. 下載所有的dependencies, 只要go.mod和go.sum不變就不需要重新下載相依RUN go mod download# Step 3. 複製source code並編譯COPY . .ENVGO111MODULE=onRUN CGO_ENABLED=0 GOOS=linux go build -o api main.go#second stageFROMalpine:latestWORKDIR/root/COPY --from=builder /api .CMD[&amp;#34;./api&amp;#34;] 透過Step 1,2 來節省下載相依的時間，試試看吧～
如同前一篇提及，alpine是精簡的fs, 缺少許多程式需要的library例如tzdata等等，如何寫出完整的Dockerfile呢？請看此</description>
    </item>
    
    <item>
      <title>Multi Stage Docker Build With Go Module</title>
      <link>https://clhjoe.github.io/post/multi-stage-docker-build-with-go-module/</link>
      <pubDate>Sun, 13 Oct 2019 20:53:48 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/post/multi-stage-docker-build-with-go-module/</guid>
      <description>為什麼要使用Multi-stage來編譯Golang？ 假設我們有一個簡單的Golang程式如下
main.go
package main import &amp;#34;github.com/gin-gonic/gin&amp;#34; func main() { r := gin.Default() r.GET(&amp;#34;/ping&amp;#34;, func(c *gin.Context) { c.JSON(200, gin.H{ &amp;#34;message&amp;#34;: &amp;#34;pong&amp;#34;, }) }) r.Run() // listen and serve on 0.0.0.0:8080 } 然後我們爲了這支程式寫了個Dockerfile
Dockerfile
FROMgolang:1.13.1-stretch COPY . /api WORKDIR/apiENVGO111MODULE=onRUN CGO_ENABLED=0 GOOS=linux go build -o api main.goCMD[&amp;#34;./api&amp;#34;] 編譯他吧！
docker build . -t api 編譯完我們來看一下Image有多大？
docker images #REPOSITORY TAG IMAGE ID CREATED SIZE #api latest 1f3921830d5a 39 seconds ago 842MB 有沒有搞錯？要842MB? 怎麼不去搶？</description>
    </item>
    
    <item>
      <title>How to Use Hugo</title>
      <link>https://clhjoe.github.io/post/how-to-use-hugo/</link>
      <pubDate>Sun, 13 Oct 2019 19:57:19 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/post/how-to-use-hugo/</guid>
      <description>甚麼是Hugo? Hugo是一個靜態網頁產生的工具。你可以透過markdown編輯內容，透過現成的theme或自己撰寫，Hugo可以將你編輯的內容轉為靜態網頁。而放置這些靜態網頁最方便的方法莫過於github.io了。
安裝Hugo For Mac
brew install hugo For Linux
snap install hugo --channel=extended or sudo apt-get install hugo 建立新的網站 #將new-site 替代成你要的網站名稱 hugo new site new-site 使用Theme #將new-site 替代成你的網站名稱,這裡以anake為例。 cd new-site git init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke echo &amp;#39;theme = &amp;#34;ananke&amp;#34;&amp;#39; &amp;gt;&amp;gt; config.toml 更多的Theme可以到 https://themes.gohugo.io/ 參考
新增一篇內文 hugo new posts/my-first-post.md 執行後會在content/posts/ 產生這份md檔，直接編輯內容就好了。如果要刪除這篇文章，也可以直接刪除檔案即可。
預覽一下網站吧 hugo server -D 執行後打開瀏覽器，輸入 https://localhost:1313/ 就可以預覽你的網站啦～
放置到github 這邊比較tricky。假設你的github帳號是handsomeboy, 如果要把文章放到handsomeboy.github.io，你必須建立handsomeboy.github.io 這個repo然後把public這個資料夾(而非整個hugo網站資料夾)推到這個repo。那hugo資料夾的git要怎麼辦呢？你可以再建個repo放整個hugo資料夾。因此更新一個文章，你必須push到兩個repo～
 建立 handsomeboy.github.io(handsomeboy記得換成妳自己的帳號名稱) 及 hugo-web兩個repo。 將public資料夾推到 handsomeboy.</description>
    </item>
    
  </channel>
</rss>