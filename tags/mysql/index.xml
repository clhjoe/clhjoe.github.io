<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
  <channel>
    <title>mysql on Joe&#39;s Notes</title>
    <link>https://clhjoe.github.io/tags/mysql/</link>
    <description>Recent content in mysql on Joe&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Mon, 26 Oct 2020 13:44:40 +0800</lastBuildDate>
    
	<atom:link href="https://clhjoe.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mysql Scan Index vs. Scan Table</title>
      <link>https://clhjoe.github.io/post/mysql-scan-index-vs-scan-table/</link>
      <pubDate>Mon, 26 Oct 2020 13:44:40 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/post/mysql-scan-index-vs-scan-table/</guid>
      <description>故事開始 假設我們有一個表紀錄著所有 APP 下的所有用戶的FCM token如下:
CREATE TABLE `fcm_token` ( `id` int unsigned NOT NULL AUTO_INCREMENT, `appid` int(10) unsigned NOT NULL, `token` varchar(255) NOT NULL&amp;#39;, PRIMARY KEY (`id`), UNIQUE KEY `uniq_unique_pair` (`appid`,`token`(225),`uid`) )ENGINE=InnoDB DEFAULT CHARSET=utf8; 當今天我們想要對某個APP下的所有用戶做推送，顯然我們需要Query出所有該APP下所有的Token
SELECT id,token FROM fcm_token WHERE appid = xxx; 這時候，根據教科書，我們如果對APPID做Index應該可以提昇效能。而且也因為我們建了 Unique Key: uniq_unique_pair 所以根據 EXPLAIN MySQL使用了這個INDEX。
但現實是殘酷的，在AWS的環境中，我們比較上面的SQL 跟 不使用INDEX 的Query 也就是:
SELECT id,token FROM fcm_token USE INDEX() WHERE appid = xxx; 我們發現後者的效能居然是前者的10倍以上(1,000~2,500 rows/sec vs. 38,000~45,000 rows/sec)，到底發生什麼事了呢！！？？</description>
    </item>
    
    <item>
      <title>Timeout原因整理-以Golang為例</title>
      <link>https://clhjoe.github.io/post/cause-of-connection-timeout/</link>
      <pubDate>Sat, 26 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://clhjoe.github.io/post/cause-of-connection-timeout/</guid>
      <description>前言 網路連線中有各種timeout, connection timeout, readtimeout, writetimeout等等，到底這些錯誤是什麼情況造成的呢？這邊以Go為例子整理出常見的timeout原因
connnection timeout 在建立連線的時候，如果遇到 JAVA java.net.ConnectException: Connection timed out: connect 或是 Golang dial tcp IP:PORT: connect: connection timed out通常是什麼原因呢？ 其實原因不外乎 * 與目的地網路不通 * 沒有權限連入(e.g. MySQL, Redis etc.) * 連到錯誤的IP(??)
前兩個比較好理解，第三個又是什麼意呢？以AWS為例，當你在EC2在照著官方的權限設定(VPC, Security Group配置)下想要連到RDS好了，假設你的RDS是my-rds.ld2kfdi343.us-west-2.rds.amazonaws.com, 這時候AWS的DNS伺服器給你的會是這一台的 Private IP ，但假設你把DNS改成8.8.8.8呢？你會發現你拿到的會是 Public IP ，這時候你就連不進去了！ 提供我常用檢查的SOP
Ping工具檢查 假設你要連的目的地是 10.2.3.1，可以試試Ping一下
ping 10.2.3.1 如果可以ping通代表網路是通得，但如果不通呢？也不一定是不通，因為對方可能沒打開ICMP。(但如果有通就代表不是網路連接問題))
telnet Port檢查 以MySQL來說，可以直接用telnet 連檢查是否可以連線，如果可以連線，則可以往MySQL權限檢查，如果不行，可以檢查一下防火牆、security group, 或是VPC。
telnet my-rds.ld2kfdi343.us-west-2.rds.amazonaws.com 3306 權限檢查 如同上一條提到，網路如果是通得，就檢查一下MySQL裡的權限設定。
DNS檢查 我們都知道假設需要連到某個域名，例如my-rds.ld2kfdi343.us-west-2.rds.amazonaws.com，必須先轉換成IP才能溝通。如果是無法解析，在Ping的時候就會發現了。那又為什麼要獨立寫呢？以Golang為例，目前版本預設是pure Go resolver(也就是Go自己寫的)去讀系統的/etc/hosts及 /etc/resolve.conf得到DNS清單，當程式裡需要連線的時候，假設/etc/hosts沒有就會按照順序去詢問/etc/resolve.conf的DNS,第一台解析錯誤就會問第二台。所以假設你在/etc/resolv.conf設定兩個DNS # aws dns server nameserver 10.</description>
    </item>
    
  </channel>
</rss>