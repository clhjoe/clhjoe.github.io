<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Joe&#39;s Notes</title>
    <link>https://clhjoe.github.io/posts/</link>
    <description>Recent content in Posts on Joe&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sun, 20 Oct 2019 19:26:31 +0800</lastBuildDate>
    
	<atom:link href="https://clhjoe.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Migrate API to Go</title>
      <link>https://clhjoe.github.io/posts/migrate-api-to-go/</link>
      <pubDate>Sun, 20 Oct 2019 19:26:31 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/posts/migrate-api-to-go/</guid>
      <description>大家應該或多或少都有經驗要將某個語言實做的API搬到另一種語言重寫。原因總是有千千百百種，但是有時候當專案很大，沒辦法一次搬完的時候又該怎麼辦呢？分享一下我們的例子，原先的API是使用PHP來撰寫，但因為幾個原因所以我們決定把他搬到Golang。
 原始PHP版本留在PHP 5.3，是一個效能不好(compare to PHP 7)以及不被維護的版本，要升級得顧慮沒有人維護的framework所以是個大工程。 因為業務的需要，一個API request有很多平行可以處理的事情，如果一步步來其實速度慢又浪費資源。 我們原始業務一直是使用Golang，所以也很熟了。  因此最後決定新的API就以Golang撰寫，有需要動到舊有的API且時間足夠再搬到Golang。這時候就遇到一個問題啦，同時兩套語言寫成的API要怎麼共存的？分成幾個維度來看～
切分域名    考量維度 切分域名 使用同個域名但routing切開     修改舊有API 只有新版的APP才會使用到新的API。舊版用戶得等版本到達率整個慘。 因為API path不變，因此新舊版同時生效   新增API 直接切開，清爽 透過設定routing來切分，比較瑣碎    因為我們必須讓使用舊版的用戶也可以馬上生效，最後我們選擇使用同個域名。如果不在乎這個，其實切分域名還是比較方便的。
切分Routing 透過CDN切分 透過Nginx切分 # /v1/user forward到PHP location /v1/user { proxy_set_header X-Request-Id $request_id; if (!-e $request_filename) { rewrite ^/(.*)$ /index.php last; } } # /v1/user/points 則forward到golang location /v1/user/points { proxy_set_header X-Request-Id $request_id; proxy_pass https://localhost:19002; }  透過Golang切分 這邊以Gin為例</description>
    </item>
    
    <item>
      <title>Complete Example of Docker Build With Go Module</title>
      <link>https://clhjoe.github.io/posts/complete-example-of-docker-build-with-go-module/</link>
      <pubDate>Sun, 13 Oct 2019 21:51:59 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/posts/complete-example-of-docker-build-with-go-module/</guid>
      <description>前兩篇 使用multi-stage來降低docker image size 及 加速Docker編譯go 程式 ，但透過alpine會缺少一些API必要的ssl或tzdata等等的套件，這篇來分享完整的範例吧～
dockerfile
#first stage - builder FROM golang:1.13.1-stretch as builder WORKDIR /api #Step 1. 複製go.mod及go.sum COPY go.mod go.sum ./ #Step 2. 下載所有的dependencies, 只要go.mod和go.sum不變就不需要重新下載相依 RUN go mod download # Step 3. 複製source code並編譯 COPY . . ENV GO111MODULE=on RUN CGO_ENABLED=0 GOOS=linux go build -o api main.go #second stage FROM alpine:latest WORKDIR /root/ #Step 4. 安裝tzdata確保時區(time package)可以正常使用 RUN apk add --no-cache tzdata #Step 5. 複製ca certificates, 確保go 可以正常的連至https的api或網頁 COPY --from=builder /etc/ssl/certs/ca-certificates.</description>
    </item>
    
    <item>
      <title>Speed Up Docker Build With Go Module</title>
      <link>https://clhjoe.github.io/posts/speed-up-docker-build-with-go-module/</link>
      <pubDate>Sun, 13 Oct 2019 21:23:54 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/posts/speed-up-docker-build-with-go-module/</guid>
      <description>上一篇 說明了如何降低Docker 編譯Go程式產生的image大小，但同時也提到了因為Go 每次都會去抓相依的module導致編譯速度就是慢！ 有什麼方法可以加速呢？來看看看優化版本
optimized.Dockerfile
#first stage - builder FROM golang:1.13.1-stretch as builder WORKDIR /api #Step 1. 複製go.mod及go.sum COPY go.mod go.sum ./ #Step 2. 下載所有的dependencies, 只要go.mod和go.sum不變就不需要重新下載相依 RUN go mod download # Step 3. 複製source code並編譯 COPY . . ENV GO111MODULE=on RUN CGO_ENABLED=0 GOOS=linux go build -o api main.go #second stage FROM alpine:latest WORKDIR /root/ COPY --from=builder /api . CMD [&amp;quot;./api&amp;quot;]  透過Step 1,2 來節省下載相依的時間，試試看吧～
如同前一篇提及，alpine是精簡的fs, 缺少許多程式需要的library例如tzdata等等，如何寫出完整的Dockerfile呢？請看此</description>
    </item>
    
    <item>
      <title>Multi Stage Docker Build With Go Module</title>
      <link>https://clhjoe.github.io/posts/multi-stage-docker-build-with-go-module/</link>
      <pubDate>Sun, 13 Oct 2019 20:53:48 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/posts/multi-stage-docker-build-with-go-module/</guid>
      <description>為什麼要使用Multi-stage來編譯Golang？ 假設我們有一個簡單的Golang程式如下
main.go
package main import &amp;quot;github.com/gin-gonic/gin&amp;quot; func main() { r := gin.Default() r.GET(&amp;quot;/ping&amp;quot;, func(c *gin.Context) { c.JSON(200, gin.H{ &amp;quot;message&amp;quot;: &amp;quot;pong&amp;quot;, }) }) r.Run() // listen and serve on 0.0.0.0:8080 }  然後我們爲了這支程式寫了個Dockerfile
Dockerfile
FROM golang:1.13.1-stretch COPY . /api WORKDIR /api ENV GO111MODULE=on RUN CGO_ENABLED=0 GOOS=linux go build -o api main.go CMD [&amp;quot;./api&amp;quot;]  編譯他吧！
docker build . -t api  編譯完我們來看一下Image有多大？
docker images #REPOSITORY TAG IMAGE ID CREATED SIZE #api latest 1f3921830d5a 39 seconds ago 842MB  有沒有搞錯？要842MB?</description>
    </item>
    
    <item>
      <title>How to Use Hugo</title>
      <link>https://clhjoe.github.io/posts/how-to-use-hugo/</link>
      <pubDate>Sun, 13 Oct 2019 19:57:19 +0800</pubDate>
      
      <guid>https://clhjoe.github.io/posts/how-to-use-hugo/</guid>
      <description>甚麼是Hugo? Hugo是一個靜態網頁產生的工具。你可以透過markdown編輯內容，透過現成的theme或自己撰寫，Hugo可以將你編輯的內容轉為靜態網頁。而放置這些靜態網頁最方便的方法莫過於github.io了。
安裝Hugo For Mac
brew install hugo  For Linux
snap install hugo --channel=extended or sudo apt-get install hugo  建立新的網站 #將new-site 替代成你要的網站名稱 hugo new site new-site  使用Theme #將new-site 替代成你的網站名稱,這裡以anake為例。 cd new-site git init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml  更多的Theme可以到 https://themes.gohugo.io/ 參考
新增一篇內文 hugo new posts/my-first-post.md  執行後會在content/posts/ 產生這份md檔，直接編輯內容就好了。如果要刪除這篇文章，也可以直接刪除檔案即可。
預覽一下網站吧 hugo server -D  執行後打開瀏覽器，輸入 https://localhost:1313/ 就可以預覽你的網站啦～
放置到github 這邊比較tricky。假設你的github帳號是handsomeboy, 如果要把文章放到handsomeboy.github.io，你必須建立handsomeboy.github.io 這個repo然後把public這個資料夾(而非整個hugo網站資料夾)推到這個repo。那hugo資料夾的git要怎麼辦呢？你可以再建個repo放整個hugo資料夾。因此更新一個文章，你必須push到兩個repo～</description>
    </item>
    
  </channel>
</rss>